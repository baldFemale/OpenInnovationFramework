Index: Coupling/gs/Landscape.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\r\nimport random\r\nfrom collections import defaultdict\r\nfrom itertools import product\r\nimport numpy as np\r\n\r\n\r\nclass Landscape:\r\n\r\n    def __init__(self, N, state_num=4):\r\n        self.N = N\r\n        self.K = None\r\n        self.state_num = state_num\r\n        self.IM, self.dependency_map = np.eye(self.N), [[]]*self.N  # [[]] & {int:[]}\r\n        self.FC = None\r\n        self.cache = {}  # state string to overall fitness: state_num ^ N: [1]\r\n        self.max_normalizer = 1\r\n        self.min_normalizer = 0\r\n        self.norm = True\r\n        self.fitness_to_rank_dict = None  # using the rank information to measure the potential performance of GST\r\n        self.state_to_rank_dict = {}\r\n\r\n    def describe(self):\r\n        print(\"*********LandScape information********* \")\r\n        print(\"LandScape shape of (N={0}, K={1}, state number={2})\".format(self.N, self.K, self.state_num))\r\n        print(\"Influential matrix: \\n\", self.IM)\r\n        print(\"Influential dependency map: \", self.dependency_map)\r\n        print(\"********************************\")\r\n\r\n    def type(self, K=0):\r\n        \"\"\"\r\n        Characterize the influential matrix\r\n        :param IM_type: \"random\", \"dependent\",\r\n        :param K: mutual excitation dependency (undirected links)\r\n        :param k: single-way dependency (directed links); k=2K for mutual dependency\r\n        :return: the influential matrix (self.IM); and the dependency rule (self.IM_dict)\r\n        \"\"\"\r\n        self.K = K\r\n        if self.K == 0:\r\n            self.IM = np.eye(self.N)\r\n        elif self.K >= (self.N - 1):\r\n            self.K = self.N - 1\r\n            self.IM = np.ones((self.N, self.N))\r\n        else:\r\n            # each row has a fixed number of dependency (i.e., K)\r\n            for i in range(self.N):\r\n                probs = [1 / (self.N - 1)] * i + [0] + [1 / (self.N - 1)] * (self.N - 1 - i)\r\n                ids = np.random.choice(self.N, self.K, p=probs, replace=False)\r\n                for index in ids:\r\n                    self.IM[i][index] = 1\r\n        for i in range(self.N):\r\n            temp = []\r\n            for j in range(self.N):\r\n                if (i != j) & (self.IM[i][j] == 1):\r\n                    temp.append(j)\r\n            self.dependency_map[i] = temp\r\n\r\n    def create_fitness_config(self,):\r\n        FC = defaultdict(dict)\r\n        for row in range(len(self.IM)):\r\n            k = int(sum(self.IM[row]))\r\n            for column in range(pow(self.state_num, k)):\r\n                FC[row][column] = np.random.uniform(0, 1)\r\n        self.FC = FC\r\n\r\n    def calculate_fitness(self, state):\r\n        result = []\r\n        for i in range(len(state)):\r\n            dependency = self.dependency_map[i]\r\n            bin_index = \"\".join([str(state[j]) for j in dependency])\r\n            bin_index = str(state[i]) + bin_index\r\n            index = int(bin_index, self.state_num)\r\n            result.append(self.FC[i][index])\r\n        return sum(result) / len(result)\r\n\r\n    def store_cache(self,):\r\n        all_states = [state for state in product(range(self.state_num), repeat=self.N)]\r\n        for state in all_states:\r\n            bits = ''.join([str(bit) for bit in state])\r\n            self.cache[bits] = self.calculate_fitness(state)\r\n\r\n    def creat_fitness_rank_dict(self,):\r\n        \"\"\"\r\n        Sort the cache fitness value and corresponding rank\r\n        To get another performance indicator regarding the reaching rate of relatively high fitness (e.g., the top 10 %)\r\n        \"\"\"\r\n        value_list = sorted(list(self.cache.values()), key=lambda x: -x)\r\n        fitness_to_rank_dict = {}\r\n        state_to_rank_dict = {}\r\n        for index, value in enumerate(value_list):\r\n            fitness_to_rank_dict[value] = index + 1\r\n        for state, fitness in self.cache.items():\r\n            state_to_rank_dict[state] = fitness_to_rank_dict[fitness]\r\n        self.state_to_rank_dict = state_to_rank_dict\r\n        self.fitness_to_rank_dict = fitness_to_rank_dict\r\n\r\n    def initialize(self, norm=True):\r\n        \"\"\"\r\n        Cache the fitness value\r\n        :param norm: normalization\r\n        :return: fitness cache\r\n        \"\"\"\r\n        self.create_fitness_config()\r\n        self.store_cache()\r\n        self.norm = norm\r\n        self.max_normalizer = max(self.cache.values())\r\n        self.min_normalizer = min(self.cache.values())\r\n        # normalization\r\n        if self.norm:\r\n            for k in self.cache.keys():\r\n                # self.cache[k] = (self.cache[k] - self.min_normalizer) / (self.max_normalizer - self.min_normalizer)\r\n                self.cache[k] = self.cache[k] / self.max_normalizer\r\n        self.creat_fitness_rank_dict()\r\n\r\n    def query_fitness(self, state):\r\n        \"\"\"\r\n        Query the accurate fitness from the landscape cache for *intact* decision string\r\n        *intact* means there only [0,1,2,3] without any [\"A\", \"B\", \"*\"] masking.\r\n        \"\"\"\r\n        bits = \"\".join([str(state[i]) for i in range(len(state))])\r\n        return self.cache[bits]\r\n\r\n    def query_cog_fitness_full(self, cog_state=None):\r\n        \"\"\"\r\n        Query the cognitive (average) fitness given a cognitive state\r\n                For S domain, there is only one alternative, so it follows the default search\r\n                For G domain, there is an alternative pool, so it takes the average of fitness across alternative states.\r\n        :param cog_state: the cognitive state\r\n        :return: the average across the alternative pool; the potential (maximum) fitness\r\n        \"\"\"\r\n        alternatives = self.cog_state_alternatives(cog_state=cog_state)\r\n        fitness_pool = [self.query_fitness(each) for each in alternatives]\r\n        potential_fitness = max(fitness_pool)\r\n        cog_fitness = sum(fitness_pool) / len(alternatives)\r\n        return cog_fitness, potential_fitness\r\n\r\n    def query_cog_fitness_partial(self, cog_state=None, expertise_domain=None):\r\n        \"\"\"\r\n        Query the cognitive (average) fitness given a cognitive state\r\n                For S domain, there is only one alternative, so it follows the default search\r\n                For G domain, there is an alternative pool, so it takes the average of fitness across alternative states.\r\n        :param cog_state: the cognitive state\r\n        :return: the average across the alternative pool.\r\n        \"\"\"\r\n        alternatives = self.cog_state_alternatives(cog_state=cog_state)\r\n        partial_fitness_alternatives = []\r\n        for state in alternatives:\r\n            partial_FC_across_bits = []  # only the expertise domains have fitness contribution\r\n            for index in range(self.N):\r\n                if index not in expertise_domain:\r\n                    continue\r\n                else:\r\n                    # the unknown domain will still affect the condition\r\n                    dependency = self.dependency_map[index]\r\n                    bin_index = \"\".join([str(state[d]) for d in dependency])\r\n                    bin_index = str(state[index]) + bin_index\r\n                    FC_index = int(bin_index, self.state_num)\r\n                    partial_FC_across_bits.append(self.FC[index][FC_index])\r\n            # print(\"partial_FC_across_bits: \", partial_FC_across_bits)\r\n            # No need to normalize; it doesn't change the relative rank and thus doesn't change the search\r\n            partial_fitness_state = sum(partial_FC_across_bits) / len(partial_FC_across_bits)\r\n            partial_fitness_alternatives.append(partial_fitness_state)\r\n        return sum(partial_fitness_alternatives) / len(partial_fitness_alternatives)\r\n\r\n    def cog_state_alternatives(self, cog_state=None):\r\n        alternative_pool = []\r\n        for bit in cog_state:\r\n            if bit in [\"0\", \"1\", \"2\", \"3\"]:\r\n                alternative_pool.append(bit)\r\n            elif bit == \"A\":\r\n                alternative_pool.append([\"0\", \"1\"])\r\n            elif bit == \"B\":\r\n                alternative_pool.append([\"2\", \"3\"])\r\n            elif bit == \"*\":\r\n                alternative_pool.append([\"0\", \"1\", \"2\", \"3\"])\r\n            else:\r\n                raise ValueError(\"Unsupported bit value: \", bit)\r\n        if self.state_num != 4:\r\n            raise ValueError(\"Only support state_num = 4\")\r\n        return [i for i in product(*alternative_pool)]\r\n\r\n    def generate_divergence_pool(self, divergence=None):\r\n        \"\"\"\r\n        Randomly select one seed state, and form the pool around a given divergence being away from the seed\r\n        For example\r\n        1) random seed: 1 1 1 1 1 1 (N=6)\r\n        2) 1 bit divergence: C_6^1 * 3 = 18 alternatives\r\n        3) 2 bits divergence: C_6^2 * 3^2 = 15 * 9 = 135 alternatives\r\n        4) In order to make the pool length the same across divergence, limit it into 18\r\n        :param divergence: change how many bits to shape the pool\r\n        :return:a list of pool\r\n        \"\"\"\r\n        state_pool = []\r\n        seed_state = np.random.choice(range(self.state_num), self.N).tolist()\r\n        seed_state = [str(i) for i in seed_state]  # state format: string\r\n        # print(\"seed_state: \", seed_state)\r\n        if divergence == 1:\r\n            for index in range(self.N):\r\n                alternative_state = seed_state.copy()\r\n                freedom_space = [\"0\", \"1\", \"2\", \"3\"]\r\n                freedom_space.remove(seed_state[index])\r\n                for bit in freedom_space:\r\n                    alternative_state[index] = bit\r\n                    state_pool.append(alternative_state.copy())\r\n            return state_pool\r\n        while True:\r\n            index_for_change = np.random.choice(range(self.N), divergence, replace=False)\r\n            alternative_state = seed_state.copy()\r\n            for index in index_for_change:\r\n                freedom_space = [\"0\", \"1\", \"2\", \"3\"]\r\n                freedom_space.remove(seed_state[index])\r\n                alternative_state[index] = freedom_space[np.random.choice(range(3))]\r\n            if alternative_state not in state_pool:\r\n                state_pool.append(alternative_state.copy())\r\n            if len(state_pool) >= 18:\r\n                break\r\n        return state_pool\r\n\r\n    def generate_quality_pool(self, quality_percentage=None):\r\n        \"\"\"\r\n        Form the pool around a given quality percentage (e.g., 50% - 60%)\r\n        :param quality:\r\n        :return:\r\n        \"\"\"\r\n        alternative_state_pool = []\r\n        reference = quality_percentage * (self.N ** self.state_num)\r\n        for state, rank in self.state_to_rank_dict.items():\r\n            if abs(rank - reference) / (self.N ** self.state_num) <= 0.05:\r\n                alternative_state_pool.append(state)\r\n        result = np.random.choice(alternative_state_pool, 18, replace=False)  #this is a string state: \"33300201\", instead of list\r\n        result = [list(each) for each in result]\r\n        return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    # Test Example\r\n    landscape = Landscape(N=8, state_num=4)\r\n    landscape.type(K=9)\r\n    landscape.initialize(norm=True)\r\n    landscape.describe()\r\n    list_cache = list(landscape.cache.values())\r\n    print(\"sd:\", np.std(list_cache))\r\n\r\n    cog_state = ['A', 'A', '1', '1', '1', '3', '1', '2']\r\n    cog_fitness = landscape.query_cog_fitness_partial(cog_state=cog_state, expertise_domain=range(len(cog_state)))\r\n    # cog_fitness = landscape.query_cog_fitness_partial(cog_state=cog_state, expertise_domain=[1, 2, 3])\r\n    print(\"partial_cog_fitness: \", cog_fitness)\r\n    print(\"normalized partial fitness: \", cog_fitness / landscape.max_normalizer)\r\n    cog_fitness_2 = landscape.query_cog_fitness_full(cog_state=cog_state)\r\n    print(\"full_cog_fitness: {0}; potential_fitness: {1}\".format(cog_fitness_2[0],  cog_fitness_2[1]))\r\n    print(\"max_cache: \", max(landscape.cache.values()))\r\n    import matplotlib.pyplot as plt\r\n    data = landscape.cache.values()\r\n    plt.hist(data, bins=40, facecolor=\"blue\", edgecolor=\"black\", alpha=0.7)\r\n    plt.xlabel(\"Range\")\r\n    plt.ylabel(\"Count\")\r\n    plt.show()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Coupling/gs/Landscape.py b/Coupling/gs/Landscape.py
--- a/Coupling/gs/Landscape.py	(revision e2236ac45e933bd86b03a75a66e04b2f178fefd5)
+++ b/Coupling/gs/Landscape.py	(date 1669651662847)
@@ -254,4 +254,5 @@
     plt.hist(data, bins=40, facecolor="blue", edgecolor="black", alpha=0.7)
     plt.xlabel("Range")
     plt.ylabel("Count")
-    plt.show()
\ No newline at end of file
+    plt.show()
+
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"4fb406d9-bb38-413e-84bd-f568027309a1\" name=\"变更\" comment=\"Unix line seperator\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FlaskConsoleOptions\" custom-start-script=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\">\r\n    <envs>\r\n      <env key=\"FLASK_APP\" value=\"app\" />\r\n    </envs>\r\n    <option name=\"myCustomStartScript\" value=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\" />\r\n    <option name=\"myEnvs\">\r\n      <map>\r\n        <entry key=\"FLASK_APP\" value=\"app\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GithubDefaultAccount\">\r\n    <option name=\"defaultAccountId\" value=\"66dcc4d0-7bb4-4faf-a2ef-3a44050bd858\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"26Qp5BDDcrxFykUGaljPqMfozWp\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.sourceCode\" />\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Socialized_Agent\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"OpenInnovationFramework\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/Socialized_innovation_crowdsourcing\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Socialized_innovation_crowdsourcing/Socialized_Agent.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.Socialized_Agent\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"应用程序级\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"默认任务\">\r\n      <changelist id=\"4fb406d9-bb38-413e-84bd-f568027309a1\" name=\"变更\" comment=\"\" />\r\n      <created>1647365481983</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1647365481983</updated>\r\n      <workItem from=\"1647365483214\" duration=\"2409000\" />\r\n      <workItem from=\"1647367926361\" duration=\"266000\" />\r\n      <workItem from=\"1647368204572\" duration=\"133000\" />\r\n      <workItem from=\"1647438492798\" duration=\"23000\" />\r\n      <workItem from=\"1647452066912\" duration=\"458000\" />\r\n      <workItem from=\"1647452553887\" duration=\"1837000\" />\r\n      <workItem from=\"1647454423867\" duration=\"24000\" />\r\n      <workItem from=\"1650740865394\" duration=\"709000\" />\r\n      <workItem from=\"1652067196399\" duration=\"146000\" />\r\n      <workItem from=\"1652073531556\" duration=\"12000\" />\r\n      <workItem from=\"1668879155974\" duration=\"1160000\" />\r\n      <workItem from=\"1668880363662\" duration=\"896000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"变更\">\r\n      <created>1647368179660</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647368179660</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"adding comments\">\r\n      <created>1647453394959</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647453394959</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"finish the run_resilience\">\r\n      <created>1647453863344</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647453863344</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"finish the run_resilience\">\r\n      <created>1647454431130</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647454431130</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"finish the run_resilience\">\r\n      <created>1668879209028</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668879209028</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"finish the run_resilience\">\r\n      <created>1668879317612</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668879317612</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"finish the run_resilience\">\r\n      <created>1668879486125</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668879486125</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"finish the run_resilience\">\r\n      <created>1668879664625</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668879664625</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Unix line seperator\">\r\n      <created>1668880544669</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1668880544669</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"10\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"变更\" />\r\n    <MESSAGE value=\"adding comments\" />\r\n    <MESSAGE value=\"finish the run_resilience\" />\r\n    <MESSAGE value=\"Unix line seperator\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Unix line seperator\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/OpenInnovationFramework$Socialized_Agent.coverage\" NAME=\"Socialized_Agent Coverage Results\" MODIFIED=\"1647452244072\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/Socialized_innovation_crowdsourcing\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e2236ac45e933bd86b03a75a66e04b2f178fefd5)
+++ b/.idea/workspace.xml	(date 1669651577323)
@@ -91,7 +91,8 @@
       <workItem from="1652067196399" duration="146000" />
       <workItem from="1652073531556" duration="12000" />
       <workItem from="1668879155974" duration="1160000" />
-      <workItem from="1668880363662" duration="896000" />
+      <workItem from="1668880363662" duration="941000" />
+      <workItem from="1669651244555" duration="325000" />
     </task>
     <task id="LOCAL-00001" summary="变更">
       <created>1647368179660</created>
@@ -156,7 +157,14 @@
       <option name="project" value="LOCAL" />
       <updated>1668880544669</updated>
     </task>
-    <option name="localTasksCounter" value="10" />
+    <task id="LOCAL-00010" summary="Unix line seperator">
+      <created>1668881274114</created>
+      <option name="number" value="00010" />
+      <option name="presentableId" value="LOCAL-00010" />
+      <option name="project" value="LOCAL" />
+      <updated>1668881274114</updated>
+    </task>
+    <option name="localTasksCounter" value="11" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
